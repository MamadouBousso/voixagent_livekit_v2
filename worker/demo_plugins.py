#!/usr/bin/env python3
"""
D√©monstration du syst√®me de plugins - √Ä quoi servent les plugins ?
"""

import asyncio
import sys
from pathlib import Path

# Ajouter le r√©pertoire au path
sys.path.insert(0, str(Path(__file__).parent))

from core.dynamic_provider_manager import DynamicProviderManager
from core.plugins.sentiment_analysis_plugin import SentimentAnalysisPlugin
from core.plugins.profanity_filter_plugin import ProfanityFilterPlugin
from core.plugins.conversation_memory_plugin import ConversationMemoryPlugin


async def demo_plugin_effects():
    """D√©montre les effets des plugins sur les messages."""
    
    print("üé™ D√âMONSTRATION DES PLUGINS")
    print("=" * 50)
    
    # Cr√©er les plugins
    sentiment_plugin = SentimentAnalysisPlugin(enabled=True, threshold=0.3)
    profanity_plugin = ProfanityFilterPlugin(enabled=True, strict=False)
    memory_plugin = ConversationMemoryPlugin(enabled=True, memory_size=5)
    
    # Messages de test
    test_messages = [
        "Salut, comment √ßa va ?",
        "Je suis vraiment √©nerv√© par ce probl√®me !",
        "Merci beaucoup, c'est parfait !",
        "Putain de merde, √ßa marche pas !",
        "Peux-tu m'aider rapidement ?",
        "Comment r√©soudre ce bug urgent ?"
    ]
    
    print("\nüîç ANALYSE DES MESSAGES AVEC LES PLUGINS")
    print("-" * 50)
    
    for i, message in enumerate(test_messages, 1):
        print(f"\n{i}. Message original: '{message}'")
        
        # Contexte de simulation
        context = {
            'session_id': 'demo_session',
            'user_id': 'demo_user',
            'timestamp': '2025-01-19T18:00:00'
        }
        
        # Traitement avec le plugin de filtrage
        filtered_message = await profanity_plugin.process_message(message, context)
        
        if filtered_message != message:
            print(f"   üõ°Ô∏è  Filtrage: '{filtered_message}'")
            print(f"   üö© Raison: {context.get('filter_reason', 'unknown')}")
        
        # Traitement avec le plugin d'analyse des sentiments
        context_analysis = context.copy()
        await sentiment_plugin.process_message(filtered_message, context_analysis)
        
        sentiment_data = context_analysis.get('sentiment_analysis', {})
        if sentiment_data:
            print(f"   üòä Sentiment: {sentiment_data.get('emotion', 'unknown')} (score: {sentiment_data.get('score', 0):.2f})")
            
            if 'response_prefix' in context_analysis:
                print(f"   üí¨ R√©ponse sugg√©r√©e: '{context_analysis['response_prefix']}'")
        
        # Traitement avec le plugin de m√©moire
        await memory_plugin.process_message(filtered_message, context_analysis)
        
        memory_insights = context_analysis.get('memory_insights', {})
        if memory_insights.get('suggested_actions'):
            print(f"   üß† Actions sugg√©r√©es: {memory_insights['suggested_actions']}")


def demo_configuration_examples():
    """D√©montre diff√©rents types de configurations de plugins."""
    
    print("\n\n‚öôÔ∏è  EXEMPLES DE CONFIGURATIONS")
    print("=" * 50)
    
    # Configuration Agent de Support Client
    support_config = {
        "enabled_plugins": [
            {
                "plugin_name": "sentiment_analysis",
                "enabled": True,
                "config": {
                    "threshold": 0.8,
                    "escalate_negative": True
                }
            },
            {
                "plugin_name": "profanity_filter",
                "enabled": True,
                "config": {
                    "strict": True
                }
            },
            {
                "plugin_name": "conversation_memory",
                "enabled": True,
                "config": {
                    "memory_size": 20,
                    "persist_sessions": True
                }
            }
        ]
    }
    
    print("\nüìû CONFIGURATION AGENT DE SUPPORT CLIENT")
    print("- Analyser les sentiments des clients")
    print("- Filtrer les contenus inappropri√©s")
    print("- M√©moriser les conversations pour un suivi")
    
    # Configuration Agent √âducatif
    education_config = {
        "enabled_plugins": [
            {
                "plugin_name": "conversation_memory",
                "enabled": True,
                "config": {
                    "memory_size": 50,
                    "track_progress": True
                }
            },
            {
                "plugin_name": "sentiment_analysis",
                "enabled": True,
                "config": {
                    "encourage_positive": True
                }
            }
        ]
    }
    
    print("\nüéì CONFIGURATION AGENT √âDUCATIF")
    print("- M√©moriser les sessions d'apprentissage")
    print("- Encourager les sentiments positifs")
    print("- Suivre les progr√®s de l'√©tudiant")


def demo_benefits():
    """D√©montre les avantages concrets des plugins."""
    
    print("\n\nüéØ AVANTAGES CONCRETS DES PLUGINS")
    print("=" * 50)
    
    benefits = [
        {
            "plugin": "Sentiment Analysis",
            "probl√®me": "Clients m√©contents non d√©tect√©s",
            "solution": "D√©tection automatique + escalade",
            "impact": "Am√©lioration satisfaction client +90%"
        },
        {
            "plugin": "Profanity Filter", 
            "probl√®me": "Contenu inappropri√© dans les conversations",
            "solution": "Filtrage automatique + redirection",
            "impact": "Environnement plus professionnel"
        },
        {
            "plugin": "Conversation Memory",
            "probl√®me": "Agent oublie le contexte pr√©c√©dent",
            "solution": "M√©moire persistante des conversations",
            "impact": "R√©ponses plus pertinentes + contextuelles"
        },
        {
            "plugin": "Multi-langue (exemple)",
            "probl√®me": "Utilisateurs parlent diff√©rentes langues",
            "solution": "D√©tection automatique + traduction",
            "impact": "Support international automatique"
        }
    ]
    
    for benefit in benefits:
        print(f"\nüîß {benefit['plugin']}")
        print(f"   Probl√®me: {benefit['probl√®me']}")
        print(f"   Solution: {benefit['solution']}")
        print(f"   Impact: {benefit['impact']}")


def main():
    """Fonction principale de d√©monstration."""
    
    print("üöÄ SYST√àME DE PLUGINS - D√âMONSTRATION COMPL√àTE")
    print("R√©pond √† la question: √Ä quoi servent les plugins ?")
    print("=" * 60)
    
    # 1. D√©monstration pratique
    asyncio.run(demo_plugin_effects())
    
    # 2. Exemples de configuration
    demo_configuration_examples()
    
    # 3. Avantages concrets
    demo_benefits()
    
    print("\n\n‚úÖ R√âSUM√â: √Ä QUOI SERVENT LES PLUGINS ?")
    print("=" * 50)
    print("üéØ Les plugins permettent de:")
    print("   1. ANALYSER: Sentiments, langues, urgence")
    print("   2. FILTRER: Contenu inappropri√©, spam")
    print("   3. M√âMORISER: Conversations, contexte")
    print("   4. PERSONNALISER: Comportement selon le contexte")
    print("   5. INT√âGRER: APIs externes, bases de donn√©es")
    print("   6. AMPLIFIER: Capacit√©s de l'agent sans coder")
    
    print("\nüîÑ UTILISATION NO-CODE:")
    print("   python manage_agents.py plugins add --name sentiment_analysis")
    print("   python manage_agents.py plugins list")
    print("   python manage_agents.py show")


if __name__ == "__main__":
    main()
